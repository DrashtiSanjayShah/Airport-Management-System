package application;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

public class employee_loginController implements Initializable {

    @FXML
    private AnchorPane anchorPane;
    private Stage stage;
    private Scene scene;
    private Parent root;

    @FXML
    private TableView myTable;
    
    @FXML
    private TableColumn<users, String > emp_id;

    @FXML
    private TableColumn<users, String > emp_name;

    @FXML
    private TableColumn<users, String > emp_age;

    @FXML
    private TableColumn<users, String > emp_job;

    @FXML
    private TableColumn<users, String > emp_salary;
    
    @FXML
    private TableColumn<users, String > employee_pwd;
    
  @FXML
  private TextField tf_age;

  @FXML
  private TextField tf_id;

  @FXML
  private TextField tf_job;

  @FXML
  private TextField tf_name;

  @FXML
  private TextField tf_password;

  @FXML
  private TextField tf_salary;
  
  @FXML
  private TextField filterField;
  
  
ObservableList<users> listM = FXCollections.observableArrayList();
ObservableList<users> dataList = FXCollections.observableArrayList();

int index = -1;
    
    
  Connection conn =null;
  ResultSet rs = null;
  PreparedStatement pst = null;
    
    
    
 // ---------------------------Back Button-------------------------
    
    
    @FXML
	public void onclicked(ActionEvent event) throws IOException {
//		TODO Autogenerated
		Parent employee_login_parent = FXMLLoader.load(getClass().getResource("login.fxml"));
		Scene employee_login_scene = new Scene(employee_login_parent);
		Stage app_stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		app_stage.setScene(employee_login_scene);
		app_stage.show();
	}
    
    
    
 // ----------------------- Add Values ---------------------------
    
    
  public void Add_users() throws SQLException{ 
	String host="localhost";
    String port="5432";
    String db_name="miniprojectfinal";
    String username="postgres";
    String password="1234";
    conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");
    String sql = "insert into employee_details(emp_id, emp_name, emp_age, emp_job, emp_salary, employee_pwd)values(?,?,?,?,?,?)";
    try {
        pst = conn.prepareStatement(sql);
        pst.setString(1, tf_id.getText());
        pst.setString(2, tf_name.getText());
        pst.setString(3, tf_age.getText());
        pst.setString(4, tf_job.getText());
        pst.setString(5, tf_salary.getText());
        pst.setString(6, tf_password.getText());
        pst.execute();
        
        JOptionPane.showMessageDialog(null, "User Add successfully");
        UpdateTable();
        search_user();
        
        
    } catch (Exception e) {
    	
    	table_display();
        //JOptionPane.showMessageDialog(null, e);
    }
}
  
  
  
//////// method select users ///////
@FXML
void getSelected (MouseEvent event){
index = myTable.getSelectionModel().getSelectedIndex();
if (index <= -1){

    return;
}
tf_id.setText(emp_id.getCellData(index).toString());
tf_name.setText(emp_name.getCellData(index).toString());
tf_age.setText(emp_age.getCellData(index).toString());
tf_job.setText(emp_job.getCellData(index).toString());
tf_salary.setText(emp_salary.getCellData(index).toString());
tf_password.setText(employee_pwd.getCellData(index).toString());

}

//--------------------------------------------------------------------

public void Edit (){   
    try {
    	String host="localhost";
        String port="5432";
        String db_name="miniprojectfinal";
        String username="postgres";
        String password="1234";
        conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");
        
        String value1 = tf_id.getText();
        String value2 = tf_name.getText();
        String value3 = tf_age.getText();
        String value4 = tf_job.getText();
        String value5 = tf_salary.getText();
        String value6 = tf_password.getText();
        String sql = "update employee_details set emp_id= '"+value1+"',emp_name= '"+value2+"',emp_age= '"+
                value3+"',emp_job= '"+value4+"',emp_salary= '"+value5+"',employee_password= '"+value6+"' where emp_id='"+value1+"' ";
        pst= conn.prepareStatement(sql);
        pst.execute();
        JOptionPane.showMessageDialog(null, "Update");
        UpdateTable();
        search_user();
    } catch (Exception e) {
        //JOptionPane.showMessageDialog(null, e);
    	table_display();
    }
    
}
  
  
  
//-----------------------------------------Delete-----------------------------------------

public void Delete() throws SQLException{
	String host="localhost";
    String port="5432";
    String db_name="miniprojectfinal";
    String username="postgres";
    String password="1234";
    conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");

    String sql = "delete from employee_details where emp_id = ?";
    try {
        pst = conn.prepareStatement(sql);
        pst.setString(1, tf_id.getText());
        pst.execute();
        JOptionPane.showMessageDialog(null, "Delete");
        UpdateTable();
        search_user();
    } catch (Exception e) {
        //JOptionPane.showMessageDialog(null, e);
    	table_display();
    }

}

//-----------------------------------------Update-----------------------------------------

public void UpdateTable(){
	listM = newuser.getDatausers();
	
	emp_id.setCellValueFactory(new PropertyValueFactory<users,String>("emp_id"));
 	emp_name.setCellValueFactory(new PropertyValueFactory<users,String>("emp_name"));
 	emp_age.setCellValueFactory(new PropertyValueFactory<users,String>("emp_age"));
 	emp_job.setCellValueFactory(new PropertyValueFactory<users,String>("emp_job"));
 	emp_salary.setCellValueFactory(new PropertyValueFactory<users,String>("emp_salary"));
 	employee_pwd.setCellValueFactory(new PropertyValueFactory<users,String>("employee_pwd"));

 //listM = newuser.getDatausers();
 
 	myTable.getItems().addAll(listM);
 
 	myTable.setItems(listM);
}


//-----------------------------------------Search User-----------------------------------------

@FXML
void search_user() {     
	
 emp_id.setCellValueFactory(new PropertyValueFactory<users,String>("emp_id"));
 emp_name.setCellValueFactory(new PropertyValueFactory<users,String>("emp_name"));
 emp_age.setCellValueFactory(new PropertyValueFactory<users,String>("emp_age"));
 emp_job.setCellValueFactory(new PropertyValueFactory<users,String>("emp_job"));
 emp_salary.setCellValueFactory(new PropertyValueFactory<users,String>("emp_salary"));
 employee_pwd.setCellValueFactory(new PropertyValueFactory<users,String>("employee_password"));
    
    dataList = newuser.getDatausers();
    myTable.setItems(dataList);
    
    FilteredList<users> filteredData = new FilteredList<>(dataList, b -> true); 
    filterField.textProperty().addListener((observable, oldValue, newValue) -> {
		filteredData.setPredicate(shop -> {
			// If filter text is empty, display all persons.
							
			if (newValue == null || newValue.isEmpty()) {
				return true;
			}
			
			// Compare first name and last name of every person with filter text.
			String lowerCaseFilter = newValue.toLowerCase();
			
			if (shop.getEmp_id().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
				return true;} // Filter matches first name.
//			else if (shop.getEmp_().toLowerCase().indexOf(lowerCaseFilter) != -1) {
//				return true; // Filter matches last name.
			//}
			     else  
			    	 return false; // Does not match.
		});
	});
	
	// 3. Wrap the FilteredList in a SortedList. 
	SortedList<users> sortedData = new SortedList(filteredData);
	
	// 4. Bind the SortedList comparator to the TableView comparator.
	// 	  Otherwise, sorting the TableView would have no effect.
	sortedData.comparatorProperty().bind(myTable.comparatorProperty());
	
	// 5. Add sorted (and filtered) data to the table.
	myTable.setItems(sortedData);
    
    
//    FilteredList<users> filteredData = new FilteredList<>(dataList, b -> true);  
//    filterField.textProperty().addListener((observable, oldValue, newValue) -> {
//    	filteredData.setPredicate(person -> {
//if (newValue == null || newValue.isEmpty()) {
// return true;
//}    
//String lowerCaseFilter = newValue.toLowerCase();
//
//if (person.getEmp_name().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
// return true; 
//} else if (person.getEmp_age().toLowerCase().indexOf(lowerCaseFilter) != -1) {
// return true; 
//}else if (person.getEmp_job().toLowerCase().indexOf(lowerCaseFilter) != -1) {
// return true; 
//}
//else if (String.valueOf(person.getEmp_salary()).indexOf(lowerCaseFilter)!=-1) {
//     return true;
//}
//else if (person.getEmployee_pwd().toLowerCase().indexOf(lowerCaseFilter) != -1) {
//    return true; 
//}
//                            
//     else  
//      return false; 
//});
//});  
//SortedList<users> sortedData = new SortedList<>(filteredData);  
//sortedData.comparatorProperty().bind(myTable.comparatorProperty());  
//myTable.setItems(sortedData);  
//
////table.getItems().addAll(data);
}

public void table_display() {
	TableColumn emp_id = new TableColumn("emp_id");
    TableColumn emp_name = new TableColumn("emp_name");
    TableColumn emp_age = new TableColumn("emp_age");
    TableColumn emp_job = new TableColumn("emp_job");
    TableColumn emp_salary = new TableColumn("emp_salary");
    TableColumn employee_pwd = new TableColumn("employee_pwd");
    myTable.getColumns().addAll(emp_id,emp_name,emp_age,emp_job,emp_salary, employee_pwd);

    ObservableList<users> data = null;
    try {
        data = emplogindb.readPrt();
    } catch (SQLException e) {
        e.printStackTrace();
        
    }
            

    emp_id.setCellValueFactory(new PropertyValueFactory<users,String>("emp_id"));
    emp_name.setCellValueFactory(new PropertyValueFactory<users,String>("emp_name"));
    emp_age.setCellValueFactory(new PropertyValueFactory<users,String>("emp_age"));
    emp_job.setCellValueFactory(new PropertyValueFactory<users,String>("emp_job"));
    emp_salary.setCellValueFactory(new PropertyValueFactory<users,String>("emp_salary"));
    employee_pwd.setCellValueFactory(new PropertyValueFactory<users,String>("employee_pwd"));


    myTable.setItems(data);
}


// -----------------------Table Display ---------------------------

@Override
public void initialize(URL url, ResourceBundle resourceBundle) {
	table_display();
    
	}
}
    
//    Connection conn = ConnectDb();
//  ObservableList<users> list = FXCollections.observableArrayList();
//  try {
//      //PreparedStatement pst = conn.prepareStatement("select * from employee_details");
//  	//ResultSet rs = pst.executeQuery();
//  	
//  	
////      PreparedStatement pst = conn.CreateStatement("select * from employee_details");
//      ResultSet rs = conn.createStatement().executeQuery("select * from employee_details");
//      
//      while (rs.next()){   
//          list.add(new users(rs.getString("emp_id"), rs.getString("emp_name"), rs.getString("emp_age"), rs.getString("emp_job"), rs.getString("emp_salary"), rs.getString("employee_password")));               
//      }
//  } catch (Exception e) {
//  }
	
//UpdateTable();
//search_user();
    
    



//private Connection ConnectDb() {
//	// TODO Auto-generated method stub
//	try {
//        Class.forName("org.postgresql.Driver");
//        Connection conn = (Connection) DriverManager.getConnection("jdbc:postgresql://localhost:5432/miniprojectfinal");
//       // JOptionPane.showMessageDialog(null, "Connection Established");
//        return conn;
//    } catch (Exception e) {
//        JOptionPane.showMessageDialog(null, e);
//        return null;
//    }
//} 







//package application;
//
//import java.io.IOException;
//import java.net.URL;
//import java.sql.Connection;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.util.ResourceBundle;
//import javafx.collections.FXCollections;
//import javafx.collections.ObservableList;
//import javafx.collections.transformation.FilteredList;
//import javafx.collections.transformation.SortedList;
//import javafx.event.ActionEvent;
//import javafx.fxml.FXML;
//import javafx.fxml.FXMLLoader;
//import javafx.fxml.Initializable;
//import javafx.scene.Parent;
//import javafx.scene.Scene;
//import javafx.scene.control.TableColumn;
//import javafx.scene.control.TableView;
//import javafx.scene.control.TextField;
//import javafx.scene.control.cell.PropertyValueFactory;
//import javafx.scene.input.MouseEvent;
//import javafx.stage.Stage;
//import javafx.scene.Node;
//import javax.swing.JOptionPane;
//
//
//public class employee_loginController implements Initializable {
//    
//
//	@FXML
//    private TableColumn<users, String> ep_cl_age;
//
//    @FXML
//    private TableColumn<users, String> ep_cl_id;
//
//    @FXML
//    private TableColumn<users, String> ep_cl_job;
//
//    @FXML
//    private TableColumn<users, String> ep_cl_name;
//
//    @FXML
//    private TableColumn<users, String> ep_cl_password;
//
//    @FXML
//    private TableColumn<users, String> ep_cl_salary;
//    
//    @FXML
//    private TableView<users> table_users;
//
//    @FXML
//    private TextField tf_age;
//
//    @FXML
//    private TextField tf_id;
//
//    @FXML
//    private TextField tf_job;
//
//    @FXML
//    private TextField tf_name;
//
//    @FXML
//    private TextField tf_password;
//
//    @FXML
//    private TextField tf_salary;
//    
//    @FXML
//    private TextField filterField;
//    
//    
//    
//       
////    ObservableList<users> listM;
////    ObservableList<users> dataList;
//    
//    ObservableList<users> listM = FXCollections.observableArrayList();
//    ObservableList<users> dataList = FXCollections.observableArrayList();
//    
//   
//    
//    int index = -1;
//    
//    Connection conn =null;
//    ResultSet rs = null;
//    PreparedStatement pst = null;
//    
//  
//	@FXML
//	public void onclicked(ActionEvent event) throws IOException {
////		TODO Autogenerated
//		Parent employee_login_parent = FXMLLoader.load(getClass().getResource("login.fxml"));
//		Scene employee_login_scene = new Scene(employee_login_parent);
//		Stage app_stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
//		app_stage.setScene(employee_login_scene);
//		app_stage.show();
//	}
//    
//     //----------------------------ADD-----------------------------------
//    public void Add_users () throws SQLException{ 
//    	String host="localhost";
//        String port="5432";
//        String db_name="miniprojectfinal";
//        String username="postgres";
//        String password="1234";
//        conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");
//        String sql = "insert into employee_details(emp_id, emp_name, emp_age, emp_job, emp_salary, employee_pwd)values(?,?,?,?,?,?)";
//        try {
//            pst = conn.prepareStatement(sql);
//            pst.setString(1, tf_id.getText());
//            pst.setString(2, tf_name.getText());
//            pst.setString(3, tf_age.getText());
//            pst.setString(4, tf_job.getText());
//            pst.setString(5, tf_salary.getText());
//            pst.setString(6, tf_password.getText());
//            pst.execute();
//            
//            JOptionPane.showMessageDialog(null, "User Add successfully");
//            UpdateTable();
//            search_user();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//    }
//    
//
//    //////// method select users ///////
//    @FXML
//    void getSelected (MouseEvent event){
//    index = table_users.getSelectionModel().getSelectedIndex();
//    if (index <= -1){
//    
//        return;
//    }
//    tf_id.setText(ep_cl_id.getCellData(index).toString());
//    tf_name.setText(ep_cl_name.getCellData(index).toString());
//    tf_age.setText(ep_cl_age.getCellData(index).toString());
//    tf_job.setText(ep_cl_job.getCellData(index).toString());
//    tf_salary.setText(ep_cl_salary.getCellData(index).toString());
//    tf_password.setText(ep_cl_password.getCellData(index).toString());
//    
//    }
//
//    //--------------------------------------------------------------------
//    
//    public void Edit (){   
//        try {
//        	String host="localhost";
//            String port="5432";
//            String db_name="miniprojectfinal";
//            String username="postgres";
//            String password="1234";
//            conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");
//            
//            String value1 = tf_id.getText();
//            String value2 = tf_name.getText();
//            String value3 = tf_age.getText();
//            String value4 = tf_job.getText();
//            String value5 = tf_salary.getText();
//            String value6 = tf_password.getText();
//            String sql = "update employee_details set emp_id= '"+value1+"',emp_name= '"+value2+"',emp_age= '"+
//                    value3+"',emp_job= '"+value4+"',emp_salary= '"+value5+"',employee_password= '"+value6+"' where emp_id='"+value1+"' ";
//            pst= conn.prepareStatement(sql);
//            pst.execute();
//            JOptionPane.showMessageDialog(null, "Update");
//            UpdateTable();
//            search_user();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//        
//    }
//    
//    
//    
//    //-----------------------------------------Delete-----------------------------------------
//    
//    public void Delete() throws SQLException{
//    	String host="localhost";
//        String port="5432";
//        String db_name="miniprojectfinal";
//        String username="postgres";
//        String password="1234";
//        conn = DriverManager.getConnection("jdbc:postgresql://"+host+":"+port+"/"+db_name+"", ""+username+"", ""+password+"");
//    
//        String sql = "delete from employee_details where emp_id = ?";
//        try {
//            pst = conn.prepareStatement(sql);
//            pst.setString(1, tf_id.getText());
//            pst.execute();
//            JOptionPane.showMessageDialog(null, "Delete");
//            UpdateTable();
//            search_user();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//        }
//    
//    }
//
//    
//    public void UpdateTable(){
//    	listM = newuser.getDatausers();
//    	 ep_cl_id.setCellValueFactory(new PropertyValueFactory<users,String>("emp_id"));
//         ep_cl_name.setCellValueFactory(new PropertyValueFactory<users,String>("emp_name"));
//         ep_cl_age.setCellValueFactory(new PropertyValueFactory<users,String>("emp_age"));
//         ep_cl_job.setCellValueFactory(new PropertyValueFactory<users,String>("emp_job"));
//         ep_cl_salary.setCellValueFactory(new PropertyValueFactory<users,String>("emp_salary"));
//         ep_cl_password.setCellValueFactory(new PropertyValueFactory<users,String>("employee_password"));
//        
////        listM = newuser.getDatausers();
//         
//         table_users.getItems().addAll(listM);
//         
//        table_users.setItems(listM);
//    }
//    
//    
//
//    
// @FXML
//    void search_user() {          
//	 ep_cl_id.setCellValueFactory(new PropertyValueFactory<users,String>("emp_id"));
//     ep_cl_name.setCellValueFactory(new PropertyValueFactory<users,String>("emp_name"));
//     ep_cl_age.setCellValueFactory(new PropertyValueFactory<users,String>("emp_age"));
//     ep_cl_job.setCellValueFactory(new PropertyValueFactory<users,String>("emp_job"));
//     ep_cl_salary.setCellValueFactory(new PropertyValueFactory<users,String>("emp_salary"));
//     ep_cl_password.setCellValueFactory(new PropertyValueFactory<users,String>("employee_password"));
//        
//        dataList = newuser.getDatausers();
//        table_users.setItems(dataList);
//        
//        
//        FilteredList<users> filteredData = new FilteredList<>(dataList, b -> true);  
//        filterField.textProperty().addListener((observable, oldValue, newValue) -> {
//        	filteredData.setPredicate(person -> {
//    if (newValue == null || newValue.isEmpty()) {
//     return true;
//    }    
//    String lowerCaseFilter = newValue.toLowerCase();
//    
//    if (person.getName().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
//     return true; 
//    } else if (person.getAge().toLowerCase().indexOf(lowerCaseFilter) != -1) {
//     return true; 
//    }else if (person.getJob().toLowerCase().indexOf(lowerCaseFilter) != -1) {
//     return true; 
//    }
//    else if (String.valueOf(person.getSalary()).indexOf(lowerCaseFilter)!=-1) {
//         return true;
//    }
//    else if (person.getPassword().toLowerCase().indexOf(lowerCaseFilter) != -1) {
//        return true; 
//    }
//                                
//         else  
//          return false; 
//   });
//  });  
//  SortedList<users> sortedData = new SortedList<>(filteredData);  
//  sortedData.comparatorProperty().bind(table_users.comparatorProperty());  
//  table_users.setItems(sortedData);  
//  
////  table.getItems().addAll(data);
//    }
//    
//    @Override
//    public void initialize(URL url, ResourceBundle rb) {
//    	
//    	Connection conn = ConnectDb();
//        ObservableList<users> list = FXCollections.observableArrayList();
//        try {
//            //PreparedStatement pst = conn.prepareStatement("select * from employee_details");
//        	//ResultSet rs = pst.executeQuery();
//        	
//        	
////            PreparedStatement pst = conn.CreateStatement("select * from employee_details");
//            ResultSet rs = conn.createStatement().executeQuery("select * from employee_details");
//            
//            while (rs.next()){   
//                list.add(new users(rs.getString("emp_id"), rs.getString("emp_name"), rs.getString("emp_age"), rs.getString("emp_job"), rs.getString("emp_salary"), rs.getString("employee_password")));               
//            }
//        } catch (Exception e) {
//        }
//    	
//    UpdateTable();
//    search_user();
//    
//    }
//
//	private Connection ConnectDb() {
//		// TODO Auto-generated method stub
//		try {
//            Class.forName("org.postgresql.Driver");
//            Connection conn = (Connection) DriverManager.getConnection("jdbc:postgresql://localhost:5432/miniprojectfinal");
//           // JOptionPane.showMessageDialog(null, "Connection Established");
//            return conn;
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e);
//            return null;
//        }
//	} 
//}
